{"version":3,"sources":["assets/twitter-logo.svg","App.js","index.js"],"names":["TWITTER_HANDLE","TWITTER_LINK","TEST_GIFS","App","useState","walletAddress","setWalletAddress","inputValue","setInputValue","gifList","setGifList","checkIfWalletIsConnected","a","window","solana","isPhantom","console","log","connect","onlyIfTrusted","response","publicKey","toString","alert","onInputChange","event","value","target","sendGif","length","useEffect","onLoad","addEventListener","removeEventListener","className","onSubmit","preventDefault","type","placeholder","onChange","map","gif","src","alt","twitterLogo","href","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iPAAe,MAA0B,yC,eCKnCA,EAAiB,cACjBC,EAAY,8BAA0BD,GACtCE,EAAY,CACjB,6DACA,6DACA,6DACA,0DACC,6DACD,6DACA,6DACA,0DACC,2DAqJaC,EAhJH,WAEV,MAA0CC,mBAAS,MAAnD,mBAAOC,EAAP,KAAsBC,EAAtB,KACA,EAAoCF,mBAAS,IAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KACA,EAA8BJ,mBAAS,IAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KACMC,EAAwB,uCAAG,gCAAAC,EAAA,oEAEVC,SAAXC,EAFqB,EAErBA,QAFqB,qBAKvBA,EAAOC,UALgB,wBAMzBC,QAAQC,IAAI,yBANa,SAQDH,EAAOI,QAAQ,CACvCC,eAAe,IATU,OAQlBC,EARkB,OAUxBd,EAAiBc,EAASC,UAAUC,YACvCN,QAAQC,IACN,6BACAG,EAASC,UAAUC,YAbM,gCAiB3BC,MAAM,8DAjBqB,0DAoB7BP,QAAQC,IAAR,MApB6B,0DAAH,qDA6CtBO,EAAgB,SAACC,GACzB,IAAQC,EAAUD,EAAME,OAAhBD,MACRlB,EAAckB,GACVV,QAAQC,IAAIV,IAGTqB,EAAO,uCAAG,sBAAAhB,EAAA,sDACbL,EAAWsB,OAAS,GACtBb,QAAQC,IAAI,YAAaV,GACxBG,EAAW,GAAD,mBAAKD,GAAL,CAAcF,KACzBC,EAAc,KAEdQ,QAAQC,IAAI,2BANG,2CAAH,qDAUda,qBAAU,WACR,IAAMC,EAAM,uCAAG,sBAAAnB,EAAA,sEACPD,IADO,2CAAH,qDAIZ,OADAE,OAAOmB,iBAAiB,OAAQD,GACzB,kBAAMlB,OAAOoB,oBAAoB,OAAQF,MAC/C,IAEHD,qBAAU,WACNzB,IACFW,QAAQC,IAAI,wBAKXP,EAAWR,MAEb,CAACG,IAmCF,OACE,qBAAK6B,UAAU,MAAf,SACE,sBAAKA,UAAU,YAAf,UACE,sBAAKA,UAAU,mBAAf,UACE,mBAAGA,UAAU,SAAb,qCACA,mBAAGA,UAAU,WAAb,yDA7BR,sBAAKA,UAAU,sBAAf,UAEE,uBACEC,SAAU,SAACV,GACTA,EAAMW,iBACLR,KAHL,UAME,uBAAOS,KAAK,OAAOC,YAAY,kBAC5BZ,MAAOnB,EACNgC,SAAUf,IAEd,wBAAQa,KAAK,SAASH,UAAU,+BAAhC,oBAEF,qBAAKA,UAAU,WAAf,SACGzB,EAAQ+B,KAAI,SAACC,GAAD,OACX,qBAAKP,UAAU,WAAf,SACE,qBAAKQ,IAAKD,EAAKE,IAAKF,KADSA,cAoB/B,sBAAKP,UAAU,mBAAf,UACE,qBAAKS,IAAI,eAAeT,UAAU,eAAeQ,IAAKE,IACtD,mBACEV,UAAU,cACVW,KAAM5C,EACN0B,OAAO,SACPmB,IAAI,aAJN,6BAKe9C,cCzJzB+C,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.f5a2b51b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.ab177c79.svg\";","import React, { useEffect,useState } from 'react';\r\nimport twitterLogo from './assets/twitter-logo.svg';\r\nimport './styles/App.css';\r\n\r\n// Constants\r\nconst TWITTER_HANDLE = '_buildspace';\r\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\r\nconst TEST_GIFS = [\r\n\t'https://media.giphy.com/media/QK7uvUvbE7gzSURvqT/giphy.gif',\r\n\t'https://media.giphy.com/media/EZICHGrSD5QEFCxMiC/giphy.gif',\r\n\t'https://media.giphy.com/media/jbwB60QgImkgpISvpb/giphy.gif',\r\n\t'https://i.giphy.com/media/PAqjdPkJLDsmBRSYUp/giphy.webp',\r\n  'https://media.giphy.com/media/QK7uvUvbE7gzSURvqT/giphy.gif',\r\n\t'https://media.giphy.com/media/EZICHGrSD5QEFCxMiC/giphy.gif',\r\n\t'https://media.giphy.com/media/jbwB60QgImkgpISvpb/giphy.gif',\r\n\t'https://i.giphy.com/media/PAqjdPkJLDsmBRSYUp/giphy.webp',\r\n  'https://i.giphy.com/media/PAqjdPkJLDsmBRSYUp/giphy.webp',\r\n  \r\n]\r\n \r\n\r\nconst App = () => {\r\n\r\n  const [walletAddress, setWalletAddress] = useState(null);\r\n  const [inputValue, setInputValue] = useState('');\r\n  const [gifList, setGifList] = useState([]);\r\n  const checkIfWalletIsConnected = async () => {\r\n    try {\r\n      const { solana } = window;\r\n\r\n      if (solana) {\r\n        if (solana.isPhantom) {\r\n          console.log('Phantom wallet found!');\r\n\r\n           const response = await solana.connect({ \r\n          onlyIfTrusted: true });\r\n           setWalletAddress(response.publicKey.toString());\r\n        console.log(\r\n          'Connected with Public Key:',\r\n          response.publicKey.toString()\r\n        );\r\n        }\r\n      } else {\r\n        alert('Solana object not found! Get a Phantom Wallet ðŸ‘»');\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n   const connectWallet = async () => {\r\n     const { solana } = window;\r\n\r\n  if (solana) {\r\n    const response = await solana.connect();\r\n    console.log('Connected with Public Key:', response.publicKey.toString());\r\n    setWalletAddress(response.publicKey.toString());\r\n  \r\n//   const onInputChange = (event) => {\r\n//   const { value } = event.target;\r\n//   setInputValue(value);\r\n// };\r\n\r\n   \r\n  \r\n  }\r\n\r\n\r\n     \r\n   };\r\n \r\n    const onInputChange = (event) => {\r\n  const { value } = event.target;\r\n  setInputValue(value);\r\n      console.log(inputValue);\r\n};\r\n\r\n   const sendGif = async () => {\r\n  if (inputValue.length > 0) {\r\n    console.log('Gif link:', inputValue);\r\n     setGifList([...gifList, inputValue]);\r\n    setInputValue('');\r\n  } else {\r\n    console.log('Empty input. Try again.');\r\n  }\r\n};\r\n  \r\n  useEffect(() => {\r\n    const onLoad = async () => {\r\n      await checkIfWalletIsConnected();\r\n    };\r\n    window.addEventListener('load', onLoad);\r\n    return () => window.removeEventListener('load', onLoad);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n  if (walletAddress) {\r\n    console.log('Fetching GIF list...');\r\n    \r\n    // Call Solana program here.\r\n\r\n    // Set state\r\n     setGifList(TEST_GIFS);\r\n  }\r\n}, [walletAddress]);\r\n const renderNotConnectedContainer = () => (\r\n    <button\r\n      className=\"cta-button connect-wallet-button\"\r\n      onClick={connectWallet}\r\n    >\r\n      Connect to Wallet\r\n    </button>\r\n  );\r\n\r\nconst renderConnectedContainer = () => (\r\n  <div className=\"connected-container\">\r\n    {/* Go ahead and add this input and button to start */}\r\n    <form\r\n      onSubmit={(event) => {\r\n        event.preventDefault();\r\n         sendGif();\r\n      }}\r\n    >\r\n      <input type=\"text\" placeholder=\"Enter gif link!\"\r\n         value={inputValue}\r\n          onChange={onInputChange}\r\n        />\r\n      <button type=\"submit\" className=\"cta-button submit-gif-button\">Add</button>\r\n    </form>\r\n    <div className=\"gif-grid\">\r\n      {gifList.map((gif) => (\r\n        <div className=\"gif-item\" key={gif}>\r\n          <img src={gif} alt={gif} />\r\n        </div>\r\n      ))}\r\n    </div>\r\n  </div>\r\n);\r\n  \r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"container\">\r\n        <div className=\"header-container\">\r\n          <p className=\"header\">ðŸ–¼ Anmie Wall</p>\r\n          <p className=\"sub-text\">\r\n             Your GIF collection in the metaverse âœ¨\r\n          </p>\r\n\r\n  { renderConnectedContainer()}\r\n          \r\n        </div>\r\n        <div className=\"footer-container\">\r\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\r\n          <a\r\n            className=\"footer-text\"\r\n            href={TWITTER_LINK}\r\n            target=\"_blank\"\r\n            rel=\"noreferrer\"\r\n          >{`built on @${TWITTER_HANDLE}`}</a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './styles/index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}