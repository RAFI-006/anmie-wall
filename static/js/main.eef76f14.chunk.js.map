{"version":3,"sources":["assets/twitter-logo.svg","App.js","index.js"],"names":["TWITTER_HANDLE","TWITTER_LINK","SystemProgram","web3","arr","Keypair","Object","values","kp","_keypair","secretKey","secret","Uint8Array","baseAccount","fromSecretKey","programID","PublicKey","idl","metadata","address","network","clusterApiUrl","opts","App","useState","walletAddress","setWalletAddress","inputValue","setInputValue","gifList","setGifList","checkIfWalletIsConnected","a","window","solana","isPhantom","console","log","connect","onlyIfTrusted","response","publicKey","toString","alert","connectWallet","onInputChange","event","value","target","getProvider","connection","Connection","Provider","createGifAccount","provider","program","Program","rpc","startStuffOff","accounts","user","wallet","systemProgram","programId","signers","getGifList","sendGif","length","addGif","account","fetch","useEffect","onLoad","addEventListener","removeEventListener","className","onClick","onSubmit","preventDefault","type","placeholder","onChange","map","item","index","src","gifLink","alt","twitterLogo","href","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.eef76f14.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.a8a75254.svg\";","import React, { useEffect,useState } from 'react';\nimport { Connection, PublicKey, clusterApiUrl } from '@solana/web3.js';\nimport {\n  Program, Provider, web3\n} from '@project-serum/anchor';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport './styles/App.css';\nimport idl from './idl.json';\nimport kp from './keypair.json'\n\n// Constants\nconst TWITTER_HANDLE = '_buildspace';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst TEST_GIFS = [\n\t'https://media.giphy.com/media/QK7uvUvbE7gzSURvqT/giphy.gif',\n\t'https://media.giphy.com/media/EZICHGrSD5QEFCxMiC/giphy.gif',\n\t'https://media.giphy.com/media/jbwB60QgImkgpISvpb/giphy.gif',\n\t'https://i.giphy.com/media/PAqjdPkJLDsmBRSYUp/giphy.webp',\n  'https://media.giphy.com/media/QK7uvUvbE7gzSURvqT/giphy.gif',\n\t'https://media.giphy.com/media/EZICHGrSD5QEFCxMiC/giphy.gif',\n\t'https://media.giphy.com/media/jbwB60QgImkgpISvpb/giphy.gif',\n\t'https://i.giphy.com/media/PAqjdPkJLDsmBRSYUp/giphy.webp',\n  'https://i.giphy.com/media/PAqjdPkJLDsmBRSYUp/giphy.webp',\n  \n]\n \nconst { SystemProgram, Keypair } = web3;\n\n// Create a keypair for the account that will hold the GIF data.\nconst arr = Object.values(kp._keypair.secretKey);\nconst secret = new Uint8Array(arr);\nconst baseAccount = web3.Keypair.fromSecretKey(secret);\n\n// Get our program's id from the IDL file.\nconst programID = new PublicKey(idl.metadata.address);\n\n// Set our network to devnet.\nconst network = clusterApiUrl('devnet');\n\n// Controls how we want to acknowledge when a transaction is \"done\".\nconst opts = {\n  preflightCommitment: \"processed\"\n}\n\n\nconst App = () => {\n\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [inputValue, setInputValue] = useState('');\n  const [gifList, setGifList] = useState([]);\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { solana } = window;\n\n      if (solana) {\n        if (solana.isPhantom) {\n          console.log('Phantom wallet found!');\n\n           const response = await solana.connect({ \n          onlyIfTrusted: true });\n           setWalletAddress(response.publicKey.toString());\n        console.log(\n          'Connected with Public Key:',\n          response.publicKey.toString()\n        );\n        }\n      } else {\n        alert('Solana object not found! Get a Phantom Wallet ðŸ‘»');\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n   const connectWallet = async () => {\n     console.log(\"hitting connnect wallet button\");\n     const { solana } = window;\n\n  if (solana) {\n    const response = await solana.connect();\n    console.log('Connected with Public Key:', response.publicKey.toString());\n    setWalletAddress(response.publicKey.toString());\n  \n//   const onInputChange = (event) => {\n//   const { value } = event.target;\n//   setInputValue(value);\n// };\n\n   \n  \n  }\n\n\n     \n   };\n \n    const onInputChange = (event) => {\n  const { value } = event.target;\n  setInputValue(value);\n      console.log(inputValue);\n};\n\nconst getProvider = () => {\n  const connection = new Connection(network, opts.preflightCommitment);\n  const provider = new Provider(\n    connection, window.solana, opts.preflightCommitment,\n  );\n\treturn provider;\n}\nconst createGifAccount = async () => {\n  try {\n    const provider = getProvider();\n    const program = new Program(idl, programID, provider);\n    console.log(\"ping\")\n    await program.rpc.startStuffOff({\n      accounts: {\n        baseAccount: baseAccount.publicKey,\n        user: provider.wallet.publicKey,\n        systemProgram: SystemProgram.programId,\n      },\n      signers: [baseAccount]\n    });\n    console.log(\"Created a new BaseAccount w/ address:\", baseAccount.publicKey.toString())\n    await getGifList();\n\n  } catch(error) {\n    console.log(\"Error creating BaseAccount account:\", error)\n  }\n}\nconst sendGif = async () => {\n  if (inputValue.length === 0) {\n    console.log(\"No gif link given!\")\n    return\n  }\n  setInputValue('');\n  console.log('Gif link:', inputValue);\n  try {\n    const provider = getProvider();\n    const program = new Program(idl, programID, provider);\n\n    await program.rpc.addGif(inputValue, {\n      accounts: {\n        baseAccount: baseAccount.publicKey,\n        user: provider.wallet.publicKey,\n      },\n    });\n    console.log(\"GIF successfully sent to program\", inputValue)\n\n    await getGifList();\n  } catch (error) {\n    console.log(\"Error sending GIF:\", error)\n  }\n};\nconst getGifList = async() => {\n  try {\n    console.log(\"hitting\");\n    const provider = getProvider();\n    const program = new Program(idl, programID, provider);\n    const account = await program.account.baseAccount.fetch(baseAccount.publicKey);\n    \n    console.log(\"Got the account\", account)\n    setGifList(account.gifList)\n\n  } catch (error) {\n    console.log(\"Error in getGifList: \", error)\n    setGifList(null);\n  }\n}\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkIfWalletIsConnected();\n    };\n    window.addEventListener('load', onLoad);\n    return () => window.removeEventListener('load', onLoad);\n  }, []);\n\n  useEffect(() => {\n  if (walletAddress) {\n    console.log('Fetching GIF list...');\n    \n    // Call Solana program here.\n    getGifList()\n    // Set state\n     // setGifList(TEST_GIFS);\n  }\n}, [walletAddress]);\n const renderNotConnectedContainer = () => (\n    <button\n      className=\"cta-button connect-wallet-button\"\n      onClick={connectWallet}\n    >\n    {walletAddress? walletAddress : \"Connect to Wallet\"}\n    </button>\n  );\n\n  const renderConnectedContainer = () => {\n    // If we hit this, it means the program account hasn't been initialized.\n      if (gifList === null) {\n        return (\n          <div className=\"connected-container\">\n            <button className=\"cta-button submit-gif-button\" onClick={createGifAccount}>\n              Do One-Time Initialization For GIF Program Account\n            </button>\n          </div>\n        )\n      } \n      // Otherwise, we're good! Account exists. User can submit GIFs.\n      else {\n        return(\n          <div className=\"connected-container\">\n            <form\n              onSubmit={(event) => {\n                event.preventDefault();\n                sendGif();\n              }}\n            >\n              <input\n                type=\"text\"\n                placeholder=\"Enter giphy link!\"\n                value={inputValue}\n                onChange={onInputChange}\n              />\n              <button type=\"submit\" className=\"cta-button submit-gif-button\">\n                Submit\n              </button>\n            </form>\n            <div className=\"gif-grid\">\n              {/* We use index as the key instead, also, the src is now item.gifLink */}\n              {gifList.map((item, index) => (\n                <div className=\"gif-item\" key={index}>\n                  <img src={item.gifLink} />\n                </div>\n              ))}\n            </div>\n          </div>\n        )\n      }\n    }\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <div className='header-div'>\n            <div>\n\n            <p className=\"header\">ðŸ–¼ Anmie Wall</p>\n          <p className=\"sub-text\">\n             Your GIF collection in the metaverse âœ¨\n          </p>\n\n            </div>\n        \n\n          {renderNotConnectedContainer()} \n\n          </div>\n        \n\n  { renderConnectedContainer()}\n          \n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built on @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}